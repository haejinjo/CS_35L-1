### Assignment 6
### hw.txt
### Eric Chuu
### 604406828


1. Even if the other teams had been observing all the bytes going across the
   network, the network would still be secure because the data is encrypted, so
   the bytes going across the network would be meaningless to them without the
   private key.
   
   (1) If we assume that the other teams had also tapped my keyboard and had
   observed all our keystrokes, the security of the network would depend on what
   we were typing. If the other teams were able to get only our passphrase, then
   the network would still be secure because they would still not have access to
   the private key, so any data would remain encrypted. If we were typing the
   private key, but we did not type the passphrase, then our network would still
   be secure because they would not have the login information. However, if our
   keystrokes contained both the passphrase and the private key, then the
   security of the network would be compromised because they would have the
   login information and the private key to decrypt all the encrypted
   information.  

   (2) If I'm booting off USB, and the other team gains physical access to the
   USB, then the network would no longer be secure. The attacker would be able
   to access the private key directly. With the private key, they would be able
   to decrypt any of the data that we send between each other and the server,
   even if it had been encrypted beforehand. The weaknesses of our setup would
   be that we were careless enough to let other teams get physical access to the
   USB that we were using to boot off of. Instead of booting off something that
   is as easily misplaced as USB, we could devise a more secure way of keeping
   the data secure that minimizes the chance of losing physical control of our
   machines. 


2. The gpg --verify command in the following instructions doesn't really verify
   that I created the tar file in question because it only checks that the
   signatures match. If one were to send a file to another person, an attacker
   could that gains access to the file could make whatever changes he/she wants
   and then sign the data accordingly and send it to the original
   recipient. When the recipient uses gpg --verify, it will only check that that
   upon decryption, the signatures match, and since the attacker had also signed
   the data to accompany his changes, no red flags will be thrown because there
   is indeed a match. Therefore gpg --verify cannot verify in confidence the
   original sender of the file. 

   One possible way we could address this problem would be to use a trusted
   third party certificate-verfication system that can keep track of what is
   being sent and received at any point in the process. This would then be able
   to detect attacks that happen in the middle of the sending process.
   
